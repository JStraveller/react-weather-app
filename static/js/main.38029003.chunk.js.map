{"version":3,"sources":["components/SearchForm.js","components/Weather.js","containers/weatherSearch.js","App.js","serviceWorker.js","index.js"],"names":["searchForm","props","Fragment","onSubmit","handleOnSubmit","className","name","type","onChange","handleOnChange","placeholder","errorMessage","weather","code","iconId","icon","weatherIcons","city","country","temp","humidity","WeatherSearch","event","preventDefault","state","setCity","getWeather","setState","hum","error","submitted","target","value","a","currentCity","fetch","api_call","ok","Error","json","response","sys","Math","round","main","id","SearchForm","this","Weather","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAmBeA,EAjBI,SAAAC,GACjB,OACE,kBAAC,IAAMC,SAAP,KACA,0BAAMC,SAAUF,EAAMG,gBACpB,2BAAOC,UAAU,SACjBC,KAAK,OACLC,KAAK,OACLC,SAAUP,EAAMQ,eAChBC,YAAY,qBAEZ,4BAAQL,UAAU,cAAlB,WAECJ,EAAMU,aAAe,uBAAGN,UAAU,WAAb,6BAAuD,O,OCQpEO,EAlBC,SAAAX,GACd,IACMY,EAAOZ,EAAMa,OACfC,EAAOC,EAAqBH,GAAME,KAKtC,OAJMF,EAAO,KAAOA,EAAO,KAAUA,EAAO,KAAOA,EAAO,MACxDE,EAAO,OAASA,GAElBA,EANe,SAMCA,EAEd,yBAAKV,UAAU,WACb,wCAAcJ,EAAMgB,KAApB,KAA4BhB,EAAMiB,SAClC,6BACA,2CAAgB,uBAAGb,UAAWU,IAA9B,IAA0Cd,EAAMkB,KAAhD,SACA,6BACA,wCAAa,uBAAGd,UAAU,gBAAmBJ,EAAMmB,SAAnD,OCdeC,E,YACnB,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KAWRG,eAAiB,SAAAkB,GACfA,EAAMC,iBACF,EAAKC,MAAMP,OAAS,EAAKO,MAAMC,UACnC,EAAKC,aACL,EAAKC,SAAS,CACZT,QAAS,GACTC,KAAM,GACNS,IAAK,GACLC,OAAO,EACPC,WAAW,EACXhB,OAAQ,OAtBO,EA2BnBL,eAAiB,SAAAa,GACf,EAAKK,SAAL,eACGL,EAAMS,OAAOzB,KAAOgB,EAAMS,OAAOC,SA7BnB,EAiCnBN,WAjCmB,sBAiCN,gCAAAO,EAAA,4DACK,mCACVC,EAAc,EAAKV,MAAMP,KAFpB,kBAMckB,MAAM,qDAAD,OAAsDD,EAAtD,+BALd,qCADL,WAMHE,EANG,QAOKC,GAPL,sBAQD,IAAIC,MAAM,+BART,wBAWcF,EAASG,OAXvB,QAWHC,EAXG,OAaT,EAAKb,SAAS,CACZF,QAASe,EAASlC,KAClBY,QAASsB,EAASC,IAAIvB,QACtBC,KAAMuB,KAAKC,MAAMH,EAASI,KAAKzB,MAC/BS,IAAKY,EAASI,KAAKxB,SACnBU,WAAW,EACXhB,OAAQ0B,EAAS5B,QAAQ,GAAGiC,KAnBrB,kDAuBT,EAAKlB,SAAS,CACZE,OAAO,IAxBA,0DA/BX,EAAKL,MAAQ,CACXP,KAAM,GACNQ,QAAS,GACTP,QAAS,GACTC,KAAM,GACNS,IAAK,GACLC,OAAO,EACPC,WAAW,GATI,E,sEAgEjB,OACE,6BACE,kBAACgB,EAAD,CACA1C,eAAgB2C,KAAK3C,eACrBK,eAAgBsC,KAAKtC,eACrBE,aAAcoC,KAAKvB,MAAMK,QAGvBkB,KAAKvB,MAAMM,YAAciB,KAAKvB,MAAMK,MAClC,kBAACmB,EAAD,CACA/B,KAAM8B,KAAKvB,MAAMC,QACjBP,QAAS6B,KAAKvB,MAAMN,QACpBC,KAAM4B,KAAKvB,MAAML,KACjBC,SAAU2B,KAAKvB,MAAMI,IACrBd,OAAQiC,KAAKvB,MAAMV,SAEnB,U,GAjF+BmC,aCS5BC,MATf,WAEE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,QCIc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.38029003.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst searchForm = props => {\r\n  return (\r\n    <React.Fragment>\r\n    <form onSubmit={props.handleOnSubmit}>\r\n      <input className=\"search\"\r\n      name=\"city\"\r\n      type=\"text\"\r\n      onChange={props.handleOnChange}\r\n      placeholder=\"type city's name\"\r\n      />\r\n      <button className=\"search-btn\">Search</button>\r\n      </form>\r\n      {props.errorMessage ? <p className=\"err-msg\">Error: Location Not Found</p> : null}\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default searchForm","import React from 'react'\r\nimport * as weatherIcons from \"../icons\"\r\n\r\n\r\nconst weather = props => {\r\n  const prefix = 'wi wi-'\r\n  const code = props.iconId\r\n  let icon = weatherIcons.default[code].icon\r\n  if (!(code > 699 && code < 800) && !(code > 899 && code < 1000)) {\r\n    icon = 'day-' + icon;\r\n  }\r\n  icon = prefix + icon\r\n  return (\r\n    <div className='weather'>\r\n      <p>Location: {props.city}, {props.country}</p>\r\n      <hr/>\r\n      <p>Temperature: <i className={icon}></i> {props.temp}Â°C</p>\r\n      <hr />\r\n      <p>Humidity: <i className=\"fas fa-tint\"></i>{props.humidity}%</p>\r\n    </div>\r\n  )\r\n}\r\nexport default weather","import React, {Component} from 'react'\r\nimport SearchForm from '../components/SearchForm'\r\nimport Weather from '../components/Weather'\r\n\r\nexport default class WeatherSearch extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      city: '',\r\n      setCity: '',\r\n      country: '',\r\n      temp: '',\r\n      hum: '',\r\n      error: false,\r\n      submitted: false\r\n    }\r\n  }\r\n  handleOnSubmit = event => {\r\n    event.preventDefault() \r\n    if (this.state.city !== this.state.setCity) {\r\n    this.getWeather()\r\n    this.setState({\r\n      country: '',\r\n      temp: '',\r\n      hum: '',\r\n      error: false,\r\n      submitted: false,\r\n      iconId: \"\"\r\n    })\r\n    }\r\n  }\r\n\r\n  handleOnChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  getWeather = async () => {\r\n    const API_KEY = \"e703a86a5d35a73258557568ace2f17e\"\r\n    const currentCity = this.state.city\r\n\r\n    try {\r\n      \r\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${currentCity}&units=metric&appid=${API_KEY}`)\r\n      if (!api_call.ok) {\r\n        throw new Error(\"Network response was not ok\")\r\n      }\r\n      \r\n      const response = await api_call.json()\r\n      \r\n      this.setState({\r\n        setCity: response.name,\r\n        country: response.sys.country,\r\n        temp: Math.round(response.main.temp),\r\n        hum: response.main.humidity,\r\n        submitted: true,\r\n        iconId: response.weather[0].id,\r\n      })\r\n      \r\n    } catch(e) {\r\n      this.setState({\r\n        error: true\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <SearchForm\r\n        handleOnSubmit={this.handleOnSubmit}\r\n        handleOnChange={this.handleOnChange}\r\n        errorMessage={this.state.error}\r\n        />\r\n        {\r\n          this.state.submitted && !this.state.error \r\n          ? <Weather\r\n            city={this.state.setCity}\r\n            country={this.state.country}\r\n            temp={this.state.temp}\r\n            humidity={this.state.hum}\r\n            iconId={this.state.iconId}\r\n          />\r\n          : null\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\nimport './App.css'\nimport WeatherSearh from './containers/weatherSearch'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <WeatherSearh />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}